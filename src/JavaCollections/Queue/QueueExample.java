package JavaCollections.Queue;

import java.util.LinkedList; // Импортируем LinkedList для реализации интерфейса Queue
import java.util.Queue;       // Импортируем интерфейс Queue
/*Класс Queue в Java представляет собой интерфейс, который определяет структуру данных для хранения
 и обработки элементов в порядке их добавления, следуя принципу "первый пришел — первый вышел"
  (FIFO — First In, First Out).

### Основные характеристики класса Queue:

1. Interface: Queue — это интерфейс в Java Collections Framework, который расширяет интерфейс Collection.

2. Основные реализации:
- LinkedList: Реализует интерфейс Queue и предоставляет динамическое связное представление очереди.
- PriorityQueue: Реализует очередь с приоритетом, которая сортирует элементы по определенному порядку,
 основанному на их естественном порядке или предоставляемом компараторе.
- ArrayDeque: Реализует двунаправленную очередь и предоставляет возможность
добавления и удаления элементов с обоих концов.

3. Методы:
- boolean offer(E e): Добавляет элемент в очередь. Возвращает true, если элемент успешно добавлен.
- E poll(): Извлекает и удаляет элемент из начала очереди. Возвращает null, если очередь пуста.
- E peek(): Возвращает элемент в начале очереди, не удаляя его. Возвращает null, если очередь пуста.
- boolean isEmpty(): Проверяет, пуста ли очередь.
- int size(): Возвращает количество элементов в очереди.
- void clear(): Очищает очередь от всех элементов.

4. Особенности:
- Queue не гарантирует порядок, если используется реализация, отличная от PriorityQueue.
- Некоторые реализации могут ограничивать количество элементов в очереди, обеспечивая поведение,
похожее на фиксированное количество.

5. Использование:
- Часто используется в задачах, связанных с обработкой данных в очереди, например,
в системах управления задачами, обработке событий, реализациях алгоритмов, работающих по принципу FIFO.

### Примечание:
Работа с Queue удобна, когда требуется организовать элементы в порядке их добавления и
 обеспечить последовательный доступ к ним. Выбор конкретной реализации зависит от требований
 к производительности и функциональности.*/
public class QueueExample {
    public static void main(String[] args) {
        // Создаем экземпляр LinkedList как Queue
        Queue<String> queue = new LinkedList<>();

        // Добавление элементов в очередь
        queue.offer("Alice");  // Добавляем элемент в конец очереди
        queue.offer("Bob");    // Добавляем элемент в конец очереди
        queue.offer("Charlie"); // Добавляем элемент в конец очереди

        // Получение элемента из начала очереди
        String first = queue.peek(); // Получаем, но не удаляем первый элемент
        System.out.println("First element in the queue: " + first);

        // Удаление элемента из начала очереди
        String dequeued = queue.poll(); // Удаляем и возвращаем первый элемент
        System.out.println("Dequeued element: " + dequeued);

        // Перебор элементов в очереди
        System.out.println("Elements in the queue:");
        for (String person : queue) {
            System.out.println(person); // Выводим каждый элемент
        }

        // Проверка размера очереди
        int size = queue.size(); // Получаем количество элементов в очереди
        System.out.println("Size of the queue: " + size);

        // Очистка очереди
        queue.clear(); // Удаляем все элементы из очереди
        System.out.println("Queue after clearing: " + queue);
    }
}
