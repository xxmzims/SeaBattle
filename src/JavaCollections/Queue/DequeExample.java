package JavaCollections.Queue;

import java.util.ArrayDeque;
import java.util.Deque;


/* Интерфейс Deque в Java (двусвязная очередь) расширяет интерфейс Queue и представляет собой структуру данных,
 поддерживающую операции добавления и удаления элементов с обоих концов (в начале и в конце очереди).

### Основные характеристики Deque:

1. Двусторонность:
- Deque позволяет добавлять и удалять элементы как из головы, так и из хвоста очереди, что делает его более гибким
 по сравнению с обычной очередью (FIFO).

2. Реализации:
- Основные реализации интерфейса Deque: ArrayDeque и LinkedList. Их выбор зависит от требований к производительности и функциональности.

3. Методы:
- Методы для добавления:
- void addFirst(E e): Добавляет элемент в начало очереди.
- void addLast(E e): Добавляет элемент в конец очереди.
- boolean offerFirst(E e): Добавляет элемент в начало, возвращает false, если очередь полна.
- boolean offerLast(E e): Добавляет элемент в конец, возвращает false, если очередь полна.
- Методы для извлечения:
- E removeFirst(): Удаляет и возвращает первый элемент очереди.
- E removeLast(): Удаляет и возвращает последний элемент очереди.
- E pollFirst(): Извлекает и удаляет первый элемент или возвращает null, если очередь пуста.
- E pollLast(): Извлекает и удаляет последний элемент или возвращает null, если очередь пуста.
- Методы для получения элементов:
- E getFirst(): Возвращает первый элемент без удаления.
- E getLast(): Возвращает последний элемент без удаления.
- E peekFirst(): Возвращает первый элемент без удаления или null, если очередь пуста.
- E peekLast(): Возвращает последний элемент без удаления или null, если очередь пуста.

4. Потокобезопасность:
- Интерфейс Deque не является потокобезопасным, и для использования в многопоточной среде необходимо применить синхронизацию.

5. Применение:
- Deque может быть полезен в случаях, когда требуется реализация стекоподобного (LIFO) и очередного (FIFO) доступа к данным.
Например, задачи с отложенной обработкой, анализ парных структур и реализации алгоритмов обхода графов. */


public class DequeExample {
    public static void main(String[] args) {
        Deque<Integer> deque = new ArrayDeque<>(); // Создание двусвязной очереди

        // Добавляем элементы
        deque.addFirst(1); // Добавить 1 в начало
        deque.addLast(2);  // Добавить 2 в конец
        deque.addFirst(3); // Добавить 3 в начало
        System.out.println("Текущая Deque: " + deque);

        // Извлекаем элементы
        int first = deque.removeFirst(); // Извлечь первый элемент (3)
        int last = deque.removeLast();   // Извлечь последний элемент (2)
        System.out.println("Извлеченные элементы: " + first + " и " + last);

        // Проверка первого и последнего элемента без удаления
        int peekFirst = deque.peekFirst(); // Получить первый элемент (1)
        int peekLast = deque.peekLast();   // Получить последний элемент (1)
        System.out.println("Первый элемент: " + peekFirst + ", последний элемент: " + peekLast);
    }
}
